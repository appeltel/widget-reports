#!/usr/bin/env python
"""
This script generates a widget report file and commits the changes
to this repository.

Usage:

    report.py -o REPORTFILE [-d]
"""
import argparse
import datetime
import logging
import os
import random

import git


COLORS = ('red', 'blue', 'green', 'brown', 'lilac', 'ultraviolet')
LOCATIONS = ('O20', 'E05', 'E12', 'H21', 'L26')

COMMIT_TEMPLATE = """\
Autogenerated report at {date}

- Updated report {filename}
"""

GIT_SSH_SCRIPT = 'widget_ssh_executable.sh'
AUTHOR = git.Actor("Widget Robot", "widget-robot@example.com")
COMMITTER = git.Actor("Widget Robot", "widget-robot@example.com")


def main():
    """
    Generate widget report and commit changes
    """
    opts = parse_arguments()

    if opts.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.WARNING)

    repo = git.Repo(os.getcwd())
    with repo.git.custom_environment(GIT_SSH=GIT_SSH_SCRIPT):
        repo.remotes.origin.pull()

    generate_report(opts.output)
    commit_report(opts.output, repo)


def parse_arguments():
    """
    Parse CLI arguments to the script and return options
    """
    parser = argparse.ArgumentParser(
        description='Generate report on widgets with specified file'
    )
    parser.add_argument(
        '--debug', '-d',
        action='store_true',
        help="enable debug logging"
    )
    parser.add_argument(
        '--output', '-o',
        default='widgets.txt',
        help='Output file for widget report'
    )
    opts = parser.parse_args()
    return opts


def generate_report(filename):
    """
    Generate a widget report and write it to the file
    """
    with open(filename, 'w') as report:
        report.write('Location\t\tColor\t\tAmount\n')
        report.write('--------\t\t-----\t\t------\n')
        for color in COLORS:
            for location in LOCATIONS:
                amount = random.randrange(1, 5)
                logging.debug('C/L {}/{} A {}'.format(location, color, amount))
                report.write(
                    '{}\t\t{}\t\t{}\n'.format(location, color, amount)
                )


def commit_report(filename, repo):
    """
    Commit report given by filename to repo on the current branch
    and push to origin
    """
    commit_message = COMMIT_TEMPLATE.format(
        date=datetime.datetime.now(),
        filename=filename
    )   
    repo.index.add([filename])
    repo.index.commit(commit_message, author=AUTHOR, committer=COMMITTER)
    with repo.git.custom_environment(GIT_SSH=GIT_SSH_SCRIPT):
        repo.remotes.origin.push()


if __name__ == '__main__':
    main()
